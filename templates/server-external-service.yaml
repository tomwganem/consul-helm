{{- $root := . }}
{{- $fullName := include "consul.fullname" $root }}
{{- $serviceType := $root.Values.external.type }}
{{- if (or (and (ne (.Values.external.enabled | toString) "-") .Values.external.enabled) (and (eq (.Values.external.enabled | toString) "-") .Values.global.enabled)) }}
  {{- range $index := until (.Values.server.replicas | int) }}
    {{- $responsiblePod := printf "%s-server-%d" $fullName $index }}
---
# This service can be used to provide connectivity with a consul cluster running in another datacenter.
# Each consul-server should have an external service that it will use to advertise on the WAN
apiVersion: v1
kind: Service
metadata:
  name: {{ $fullName }}-server-{{ $index }}-external
  labels:
    app: {{ template "consul.name" $root }}
    chart: {{ template "consul.chart" $root }}
    heritage: {{  $root.Release.Service }}
    release: {{  $root.Release.Name }}
  annotations:
    # This must be set in addition to publishNotReadyAddresses due
    # to an open issue where it may not work:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    # See your cloud provider's documentation for the correct annotations
    # needed for creating an external LoadBalancer.
    {{- range $key, $value :=  $root.Values.external.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  type: LoadBalancer
  # Kubernetes does not allow external LoadBalancer services to serve both TCP and UDP ports.
  # Consul federation will continue to work with just tcp but will complain about "other probes failed"
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8500
      targetPort: 8500
    - name: serfwan-tcp
      protocol: "TCP"
      port: 8302
      targetPort: 8302
    - name: server
      port: 8300
      targetPort: 8300
  selector:
    app: {{ template "consul.name" $root }}
    release: "{{ $root.Release.Name }}"
    component: server
    pod: {{ $responsiblePod | quote }}
  {{- end }}
{{- end }}
